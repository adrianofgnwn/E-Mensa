
Explanation of Proposed Stored Procedures for the E-Mensa Project

1. Procedure for Tracking Failed Login Attempts

In many web applications, security is a key concern, especially when it comes to user authentication. A common method for preventing unauthorized access is to track failed login attempts. I propose creating a stored procedure named track_failed_login_attempts that would increment a user's failed login count in the benutzer table each time a login attempt fails.

Purpose:
This procedure will update the anzahlfehler field (the failed login attempt counter) for a specific user. By centralizing this logic in the database, we ensure consistent tracking of login failures regardless of where the logic is executed in the application. Additionally, this procedure would enable us to easily implement account locking features, such as temporarily locking a user's account after a predefined number of failed login attempts.

Why It's Useful:

Security: This procedure helps to mitigate brute-force attacks by tracking failed login attempts and allowing us to implement features such as account lockouts after a certain number of failed attempts.
Centralized Logic: By handling failed login tracking directly in the database, we ensure that the same logic is applied throughout the application, reducing redundancy and improving maintainability.
Ease of Implementation: Once implemented, the procedure can be easily invoked each time a user attempts to log in, making it simple to manage login security.
Example SQL Code:

sql
Copy code
DELIMITER $$

CREATE PROCEDURE track_failed_login_attempts(IN user_id INT)
BEGIN
    UPDATE benutzer
    SET anzahlfehler = anzahlfehler + 1
    WHERE id = user_id;
END $$

DELIMITER ;
2. Procedure for Resetting a User's Password

Another important feature for user management is the ability to reset a user's password, whether it is forgotten or the user requests a change for security reasons. I propose creating a stored procedure named reset_user_password that would allow an administrator or the system itself to reset a user's password to a new one.

Purpose:
This procedure would update the passwort field for a specific user in the benutzer table, hashing the new password before storing it. It would also update the letztepasswortaenderung field to indicate when the password was last changed. The password would be hashed using a salt to ensure security.

Why It's Useful:

Password Management: This procedure provides a secure and easy way to reset passwords, ensuring that users can regain access to their accounts in case of a forgotten password.
Security: Storing the password in a hashed format and recording the timestamp of the password change helps in maintaining secure password policies and enables auditing.
Consistency: By encapsulating the password reset logic in the database, we reduce the risk of inconsistencies in how passwords are handled across the application.
Example SQL Code:

sql
Copy code
DELIMITER $$

CREATE PROCEDURE reset_user_password(IN user_id INT, IN new_password VARCHAR(255))
BEGIN
    UPDATE benutzer
    SET passwort = SHA1(CONCAT('your_salt', new_password)), letztepasswortaenderung = NOW()
    WHERE id = user_id;
END $$

DELIMITER ;
Conclusion:

Both of these stored procedures—tracking failed login attempts and resetting passwords—are essential for maintaining the security and manageability of user authentication in the E-Mensa system. By handling these operations in the database, we ensure better performance, security, and consistency across the application. Additionally, these procedures allow us to quickly implement important features such as account lockouts and password resets, enhancing the overall user experience and safety.

